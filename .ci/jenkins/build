#!/usr/bin/env groovy
// Copyright (C) 2021 Edge Network Technologies Limited
// Use of this source code is governed by a GNU GPL-style license
// that can be found in the LICENSE.md file. All rights reserved.

@Library('semver-compare-lib@1.0.0') _

def buildAndPushImage(registryCredential, tag, args) {
  docker.withRegistry("https://registry.edge.network", registryCredential) {
    def image = docker.build("registry.edge.network/$tag", "$args .")
    image.push()
    return "registry.edge.network/$tag"
  }
}

def b64e(input) {
  return input.bytes.encodeBase64().toString()
}

def deployScript() {
  return b64e('''
  #!/bin/bash

  # Pull the latest version
  docker pull registry.edge.network/internal/cli-packaged

  # Transfer x64 binaries from image to volume
  docker run \
    --rm \
    --env NETWORK=$NETWORK \
    --env VERSION=$VERSION \
    --volume fileserver-data:/mnt/fileserver \
    registry.edge.network/internal/cli-packaged
  ''')
}

def skipRemainingStages = false
def version

pipeline {
  agent {
    label 'remote'
  }
  stages {
    stage('Check version') {
      steps {
        script {
          def versionCheckUrl = 'https://files.edge.network/cli/$NETWORK/linux/x64/latest/version'
          def latestVersion = sh(script: "curl -s $versionCheckUrl", returnStdout: true).trim()
          version = sh(script: 'cat package.json | jq -r .version', returnStdout: true).trim()

          if (semver_compare(version, latestVersion) <= 0 && FORCE_UPDATE == 'false') {
            skipRemainingStages = true
            println "version $version <= latest version $latestVersion, skipping"
          }
        }
      }
    }

    stage('Build') {
      failFast true
      when {
        expression {
          !skipRemainingStages
        }
      }
      parallel {
        stage('x64') {
          agent {
            label 'arch-x64'
          }
          steps {
            script {
              def args = "--file .ci/docker/build --build-arg NETWORK=$NETWORK --build-arg NODE=$NODE --build-arg ARCH=x64"
              buildAndPushImage(REGISTRY_CREDENTIAL, "internal/cli-x64:$NETWORK", args)
            }
          }
        }
        stage('arm64') {
          agent {
            label 'arch-arm64'
          }
          steps {
            script {
              def args = "--file .ci/docker/build --build-arg NETWORK=$NETWORK --build-arg NODE=$NODE --build-arg ARCH=arm64"
              buildAndPushImage(REGISTRY_CREDENTIAL, "internal/cli-arm64:$NETWORK", args)
            }
          }
        }
      }
    }

    stage('Package') {
      agent {
        label 'arch-x64'
      }
      when {
        expression {
          !skipRemainingStages
        }
      }
      steps {
        script {
          // Ensure required images are up to date
          sh "docker pull registry.edge.network/internal/cli-x64:$NETWORK"
          sh "docker pull registry.edge.network/internal/cli-arm64:$NETWORK"

          def args = "--no-cache --file .ci/docker/package --build-arg NETWORK=$NETWORK --build-arg NODE=$NODE"
          buildAndPushImage(REGISTRY_CREDENTIAL, "internal/cli-packaged:$NETWORK", args)
        }
      }
    }

    stage('Deploy') {
      agent {
        label 'arch-x64'
      }
      when {
        expression {
          !skipRemainingStages
        }
      }
      steps {
        script {
          def sshPort = env.SSH_PORT != null ? env.SSH_PORT : 22
          def ssh = "ssh -o ServerAliveInterval=120 -o ServerAliveCountMax=5 -o StrictHostKeyChecking=no -p ${sshPort} jenkins@${DEPLOY_TARGET} "
          def filename = "deploy_${UUID.randomUUID().toString()}.sh"
          def script = deployScript()

          sshagent(credentials: ['a687b920-fcb4-41e4-a878-5ae1f6850b26']) {
            println "> deploying CLI binaries to ${DEPLOY_TARGET}..."

            // Execute the script
            sh "$ssh 'echo $script | base64 -d > ${filename} && \
              chmod +x ${filename} && \
              NETWORK=$NETWORK \
              VERSION=$version \
                bash -x ./${filename} && \
              rm ${filename}'"
          }
        }
      }
    }
  }
}
